image: node:12-alpine

variables:
  #name of the app
  _APP: api-docs
  #type of tempalte for web app
  _HELM_CHART_WEB: nodejs-lb
  #template for worker app
  _HELM_CHART_WORKER: nodejs


  #do we need to build web
  WEB_ENABLED: 'true'
  #do we need to build worker
  WORKER_ENABLED: 'false'

  WORKER_DOCKER_IMAGE: Dockerfile.worker
  #image for web docker file in the root folder
  WEB_DOCKER_IMAGE: Dockerfile

  TESTS_WORKER_ENABLED: 'false'
  TESTS_WEB_ENABLED: 'false'


 #empty name to match
  WORKER_NAME: -worker
  WEB_NAME: -web

  #GCR settings
  GCR_PROJECT_BASE: gitlab-
  BASE_GCR_PATH: gcr.io/${GOOGLE_PROJECT_ID}/${GCR_PROJECT_BASE}${_APP}


  DOCKER_DRIVER: overlay2

  #DEFAULT ALWAYS TO FALSE
  FORCE_PULL_WEB_HELM: 'false'
  FORCE_PULL_WORKER_HELM: 'false'

  DEV_SUPPRESS_LB: 'true'


cache:
  paths:
  - vendor/apt
  - ${_HELM_CHART_WEB}/
  - ${_HELM_CHART_WORKER}/
  - python/
  - cache/
  - node_modules/

stages:
  - build
 # - test
  - pre-deploy
  - deploy


    


docker_build_web:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]  
  script:
    - export GOOGLE_APPLICATION_CREDENTIALS=/kaniko/kaniko-secret.json
    - echo $GOOGLE_APPLICATION_CREDENTIALS_BASE64 | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - /kaniko/executor --context $CI_PROJECT_DIR --cache=true --cache-repo=$CI_REGISTRY --dockerfile $CI_PROJECT_DIR/${WEB_DOCKER_IMAGE} --destination ${BASE_GCR_PATH}${WEB_NAME}:$CI_COMMIT_SHA --destination ${BASE_GCR_PATH}${WEB_NAME}:v${CI_COMMIT_TAG}
  only:
    variables:
    - $WEB_ENABLED == 'true'

docker_build_worker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]  
  script:
    - export GOOGLE_APPLICATION_CREDENTIALS=/kaniko/kaniko-secret.json
    - echo $GOOGLE_APPLICATION_CREDENTIALS_BASE64 | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - /kaniko/executor --context $CI_PROJECT_DIR --cache=true --cache-repo=$CI_REGISTRY --dockerfile $CI_PROJECT_DIR/${WORKER_DOCKER_IMAGE} --destination ${BASE_GCR_PATH}${WORKER_NAME}:$CI_COMMIT_SHA --destination ${BASE_GCR_PATH}${WORKER_NAME}:v${CI_COMMIT_TAG}     
  only:
    variables:
    - $WORKER_ENABLED == 'true'    

deploy_web:
  stage: deploy
  artifacts:
    paths:
      - ${_HELM_CHART_WEB}/
  image: linkyard/docker-helm
  script:
    - helm upgrade --install ${_APP}-${_HELM_CHART_WEB} --namespace default ./${_HELM_CHART_WEB} --set image.tag=$CI_COMMIT_SHA  -f ./helm/*/values.yaml -f ./helm/*/values-dev.yaml  
  only:
    variables:
    - $WEB_ENABLED == 'true'
  except:
    - tags

deploy_worker:
  stage: deploy
  artifacts:
    paths:
      - ${_HELM_CHART_WORKER}/
  image: linkyard/docker-helm
  script:
    - helm upgrade --install ${_APP}${WORKER_NAME}-${_HELM_CHART_WORKER} --namespace default ./${_HELM_CHART_WORKER} --set image.repository=${BASE_GCR_PATH}${WORKER_NAME},image.tag=$CI_COMMIT_SHA  -f ./helm/*/values.yaml -f ./helm/*/values-dev.yaml  
  only:
    variables:
    - $WORKER_ENABLED == 'true'
  except:
    - tags  

get_helm_web_repo:
  stage: build
  script:
    - mkdir -p vendor/apt
    - apk update && apk upgrade && apk add --no-cache bash git openssh
    - git clone https://${HELM_NODEJS_LB_TOKEN_USER}:${HELM_NODEJS_LB_TOKEN}@gitlab.com/flowaihq/helm/${_HELM_CHART_WEB}.git || true
    - if [[ $DEV_SUPPRESS_LB == 'true' ]] ; then echo 1; else echo 0 ; fi
    - if [[ $DEV_SUPPRESS_LB == 'true' ]] ; then rm -r ./nodejs-lb/charts/nginx-ingress ; else echo 0 ; fi
    - ls ./nodejs-lb/charts
  artifacts:
    paths:
      - ${_HELM_CHART_WEB}/    
  cache:
    paths:
      - ${_HELM_CHART_WEB}/
    key: "$CI_BUILD_NAME"
    untracked: true
  only:
    variables:
    - $WEB_ENABLED == 'true' 
    - $FORCE_PULL_WEB_HELM == 'true'
    

get_helm_worker_repo:
  stage: build
  script:
    - mkdir -p vendor/apt
    - apk update && apk upgrade && apk add --no-cache bash git openssh
    - git clone https://${HELM_NODEJS_TOKEN_USER}:${HELM_NODEJS_TOKEN}@gitlab.com/flowaihq/helm/${_HELM_CHART_WORKER}.git || true
  artifacts:
    paths:
      - ${_HELM_CHART_WORKER}/    
  cache:
    paths:
      - ${_HELM_CHART_WORKER}/
    key: "$CI_BUILD_NAME"
    untracked: true
  only:
    variables:
    - $WORKER_ENABLED == 'true' 
    - $FORCE_PULL_WORKER_HELM == 'true'